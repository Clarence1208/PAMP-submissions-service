# Sample GraphQL Schema

type Query {
  users: [User!]!
  user(id: ID!): User
  posts(authorId: ID, limit: Int, offset: Int): [Post!]!
  post(id: ID!): Post
}

type Mutation {
  createUser(input: CreateUserInput!): User!
  updateUser(id: ID!, input: UpdateUserInput!): User!
  deleteUser(id: ID!): Boolean!
  createPost(input: CreatePostInput!): Post!
  updatePost(id: ID!, input: UpdatePostInput!): Post!
  deletePost(id: ID!): Boolean!
}

type Subscription {
  userCreated: User!
  postCreated: Post!
  commentAdded(postId: ID!): Comment!
}

type User {
  id: ID!
  name: String!
  email: String!
  age: Int
  posts: [Post!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Post {
  id: ID!
  title: String!
  content: String!
  author: User!
  comments: [Comment!]!
  tags: [String!]!
  published: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Comment {
  id: ID!
  content: String!
  author: User!
  post: Post!
  createdAt: DateTime!
}

input CreateUserInput {
  name: String!
  email: String!
  age: Int
}

input UpdateUserInput {
  name: String
  email: String
  age: Int
}

input CreatePostInput {
  title: String!
  content: String!
  authorId: ID!
  tags: [String!]
  published: Boolean = false
}

input UpdatePostInput {
  title: String
  content: String
  tags: [String!]
  published: Boolean
}

scalar DateTime

# Example queries:

# query GetUsers {
#   users {
#     id
#     name
#     email
#     posts {
#       id
#       title
#       published
#     }
#   }
# }

# query GetUser($id: ID!) {
#   user(id: $id) {
#     id
#     name
#     email
#     age
#     posts {
#       id
#       title
#       content
#       comments {
#         id
#         content
#         author {
#           name
#         }
#       }
#     }
#   }
# }

# mutation CreateUser($input: CreateUserInput!) {
#   createUser(input: $input) {
#     id
#     name
#     email
#     createdAt
#   }
# } 